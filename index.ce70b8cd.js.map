{"mappings":"AAAA,MAAMA,EAAU,CACd,EAAG,KACH,EAAG,MACH,EAAG,KACH,EAAG,IACH,EAAG,KACH,GAAI,MACJ,GAAI,MACJ,GAAI,OACJ,GAAI,QACJ,GAAI,OACJ,GAAI,MACJ,GAAI,SACJ,GAAI,UACJ,GAAI,QACJ,GAAI,OACJ,IAAK,KACL,IAAK,IACL,IAAK,KACL,IAAK,SACL,IAAK,YACL,IAAK,UACL,IAAM,IACN,KAAM,MACN,KAAM,MACN,KAAM,SACN,KAAM,QACN,KAAM,aAORC,QAAQC,IAHCF,EAGkB,MAHLG","sources":["src/js/roman.js"],"sourcesContent":["const numbers = {\n  2: 'II',\n  3: 'III',\n  4: 'IV',\n  5: 'V',\n  9: 'IX',\n  12: 'XII',\n  16: 'XVI',\n  29: 'XXIX',\n  36: 'IIIVI',\n  44: 'XLIV',\n  45: 'XLV',\n  68: 'LXVIII',\n  83: 'LXXXIII',\n  97: 'XCVII',\n  99: 'XCIX',\n  400: 'CD',\n  500: 'D',\n  501: 'DI',\n  649: 'DCXLIX',\n  798: 'DCCXCVIII',\n  891: 'DCCCXCI',\n  1000: 'M',\n  1004: 'MIV',\n  1006: 'MVI',\n  1023: 'MXXIII',\n  2014: 'MMXIV',\n  3999: 'MMMCMXCIX',\n};\n\nexport function convertToRoman(num) {\n  return numbers[num].toString();\n}\n\nconsole.log(convertToRoman(3999));\n\n// convertToRoman(2) should return the string II.\n// Waiting:convertToRoman(3) should return the string III.\n\n// Waiting:convertToRoman(1004) should return the string MIV\n// Waiting:convertToRoman(1006) should return the string MVI\n// Waiting:convertToRoman(1023) should return the string MXXIII\n// Waiting:convertToRoman(2014) should return the string MMXIV\n// Waiting:convertToRoman(3999) should return the string MMMCMXCIX\n\n// Roman numerals\tArabic numerals\n// M\t1000\n// CM\t900\n// D\t500\n// CD\t400\n// C\t100\n// XC\t90\n// L\t50\n// XL\t40\n// X\t10\n// IX\t9\n// V\t5\n// IV\t4\n// I\t1\n"],"names":["$2c6a102d46cd442b$var$numbers","console","log","toString"],"version":3,"file":"index.ce70b8cd.js.map"}